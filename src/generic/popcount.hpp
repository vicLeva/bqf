#ifndef __popcount__
#define __popcount__
#include <bit>
#include <bitset>
#include <cstdint>
#include <iostream>
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#if defined(__aarch64__) || defined(_M_ARM64)
    #include <arm_neon.h>
#else
    #include <immintrin.h>
#endif
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
int popcount_u32_c(const uint32_t _val)
{
    uint32_t x = _val;
    int count = 0;
    while ( x ) {
        count += (x & 1);
        x >>= 1;
    }
    return count;
}
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
int popcount_u64_c(const uint64_t _val)
{
    uint64_t x = _val;
    int count = 0;
    while ( x ) {
        count += (x & 1);
        x >>= 1;
    }
    return count;
}
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#if defined(__SSE4_2__)
int popcount_u32_x86(const uint32_t _val)
{
    uint32_t val = _val;
	asm("popcnt %[val], %[val]"	: [val] "+r" (val)	: : "cc");
	return val;
}
#endif
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#if defined(__SSE4_2__)
int popcount_u64_x86(const uint64_t _val)
{
    uint64_t val = _val;
	asm("popcnt %[val], %[val]" : [val] "+r" (val) : : "cc");
	return val;
}
#endif
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#if defined(__aarch64__) || defined(_M_ARM64)
uint32_t popcount_u32_arm(const uint32_t val)
{
    return vaddlv_u8(vcnt_u8(vcreate_u8((uint64_t) val)));
}
#endif
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#if defined(__aarch64__) || defined(_M_ARM64)
uint64_t popcount_u64_arm(const uint64_t val)
{
    return vaddlv_u8(vcnt_u8(vcreate_u8((uint64_t) val)));
}
#endif
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
uint32_t popcount_u32_builtin(const uint32_t val)
{
    return __builtin_popcount(val);
}
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
uint64_t popcount_u64_builtin(const uint64_t val)
{
    return __builtin_popcountll(val);
}
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
#endif